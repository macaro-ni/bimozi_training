

<!--<div class="container">-->
<!--  <div class="row">-->

<div>
<!--railsの要素を入れたら描画できなくなったが、divで囲ったら解決した-->
    <h1>「<%= @letter.name %>」の練習</h1>

    <!--canvasの背景設定時に追加-->
    <div id="sample-text" class="web_font">
      <%= @letter.name %>
    </div>


</div>

    <div>
        <input type="radio" id="draw" name="mode">
        <label for="draw">ペン</label>
        <input type="radio" id="erase" name="mode">
        <label for="draw">消しゴム</label>
        <button onclick="canvas.clear().renderAll()">全て削除</button>
    </div>
    <div>
        <input type="button" id="downloadPng">
    </div>
    <br>

    <!-- お絵描きエリアの設定 -->
    <canvas id="canvas" height="500" width="500" style="border-style: solid; border-color: black;"></canvas>

    <!-- Fabric.jsの読み込み -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/fabric.js/4.5.0/fabric.min.js"></script>

    <!--ペン機能-->
    <script>
    const canvas = new fabric.Canvas("canvas");

    document.getElementById("draw").addEventListener("click", function () {
        canvas.freeDrawingBrush = new fabric.PencilBrush(canvas);
        canvas.freeDrawingBrush.width=5;
        canvas.freeDrawingBrush.color="black";
        canvas.isDrawingMode = true;
    });

    // 消しゴム機能
        // canvas.backgroundColor="white";

    document.getElementById("erase").addEventListener("click", function () {
      canvas.freeDrawingBrush = new fabric.PencilBrush(canvas);
      canvas.freeDrawingBrush.width=10;
      canvas.freeDrawingBrush.color="white";
      canvas.isDrawingMode = true;
    });


// ※以下はcanvas背景に文字を入れるための追記
      // canvasの背景を設定する関数
  function setBackground(canvas, text) {
    // 背景に使う画像のサイズをキャンバスと同じにする:よくわからないのでコメントアウト
    // canvas.setBackgroundImage('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg">" width="' + canvas.width + '" height="' + canvas.height + '</svg>', canvas.renderAll.bind(canvas));


    // テキストをキャンバスに描画する
    var text = new fabric.Text(text, {
      fontSize: 100,
      fill: '#dcdcdc',
      textAlign: 'center'
    });
    canvas.add(text);
  }
// フォームから文字列を取得する
var sampleText = document.getElementById('sample-text').textContent;

// Canvasの背景を設定する
setBackground(canvas, sampleText);
// ※



// ダウンロード
document.getElementById("downloadPng").addEventListener("click", function () {
   const base64 = canvas.toDataURL({
       format: "png",
   });

    document.getElementById("newImg").value = base64;


    $.ajax({
      url: "https://086192e85b094c90b02448a4e1eca7d4.vfs.cloud9.ap-northeast-1.amazonaws.com/letters/<%= @letter.id %>/post_image",  // リクエストを送信するURLを指定
      type: "POST",  // HTTPメソッドを指定（デフォルトはGET）
      data: {  // 送信するデータをハッシュ形式で指定
        image: {body: base64}
      },
      dataType: "json"  // レスポンスデータをjson形式と指定する
    })
    .done(function(data) {
      window.location.href = "https://086192e85b094c90b02448a4e1eca7d4.vfs.cloud9.ap-northeast-1.amazonaws.com/practices";
       // textareaを空にする
    })
    .fail(function() {
      alert("error!");  // 通信に失敗した場合はアラートを表示
    })
    .always(function() {

    });
    //// .done：処理に成功した時（practice/indexぺージに遷移する）。.fail:処理に失敗した時（アラート表示）。.always:done,failの後にいつも行われるもの（特になし）。

});


  // 画像保存機能
      function chgImg()
    {
      var png = cvs.toDataURL();
      byebug
      document.getElementById("newImg").src = png;
    }

    </script>
    <textarea id="newImg"></textarea>

    <form>
       <input type="button" value="画像に変換" onclick="chgImg()">
     </form>

<!--  </div>-->
<!--</div>-->
