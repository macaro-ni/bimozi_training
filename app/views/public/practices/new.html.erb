

<!--<div class="container">-->
<!--  <div class="row">-->
<div>
</div>
<div>

<!--railsの要素を入れたら描画できなくなったが、divで囲ったら解決した-->
    <h1>文字練習</h1>

    <!--canvasの背景設定時に追加-->
    「
     
      <span id="sample-text">
  <% if @letter.name.length >= 15 %>
    <% num = 0 %>
    <% while num <= @letter.name.length do %>
      <% letter15 = @letter.name[num, 15] %>
      <%= letter15 %>
      <% num += 15 %>
      <% if @letter.name.length >= num %>
        </br>
      <% end %>
    <% end %>
    
  <% else %>
      <%= safe_join(@letter.name.split("\n"), tag(:br)) %>

  <% end %>
</span>
      」
 

</div>

    <div>
        <input type="radio" id="draw" name="mode">
        <label for="draw">ペン</label>
        <input type="radio" id="erase" name="mode">
        <label for="draw">消しゴム</label>
        <!--<button onclick="canvas.clear().renderAll()", class: "btn btn-sm">全て削除</button>-->
    </div>
    <div>
        <% if current_user.email == 'guest@example.com' %>
          [会員の方は練習の記録ができます。]
        <% else %>
          <input type="button" id="downloadPng" value="保存" class="btn btn-sm" >
        <% end %>
    </div>
    <br>


    <!-- お絵描きエリアの設定 -->
    <canvas id="canvas" height="500" width="1000" style="border-style: solid; border-color: black;"> </canvas>

    <!-- Fabric.jsの読み込み -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/fabric.js/4.5.0/fabric.min.js"></script>

    <!--ペン機能-->
    <script>
    const canvas = new fabric.Canvas("canvas");

    document.getElementById("draw").addEventListener("click", function () {
        canvas.freeDrawingBrush = new fabric.PencilBrush(canvas);
        canvas.freeDrawingBrush.width=5;
        canvas.freeDrawingBrush.color="black";
        canvas.isDrawingMode = true;
    });

    // 消しゴム機能
        // canvas.backgroundColor="white";

    document.getElementById("erase").addEventListener("click", function () {
      canvas.freeDrawingBrush = new fabric.PencilBrush(canvas);
      canvas.freeDrawingBrush.width=10;
      canvas.freeDrawingBrush.color="white";
      canvas.isDrawingMode = true;
    });


// ※以下はcanvas背景に文字を入れるための追記
//       canvasの背景を設定する関数
  // function setBackground(canvas, text){
    // 背景に使う画像のサイズをキャンバスと同じにする:よくわからないのでコメントアウト
    // canvas.setBackgroundImage('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg">" width="' + canvas.width + '" height="' + canvas.height + '</svg>', canvas.renderAll.bind(canvas));




    // テキストをキャンバスに描画する
    // var canvas = new fabric.Canvas('canvas');
    // 以下２行を消したら２重のcanvas枠線消えたし、上の１行も２重でcanvas作ってたから消した（4/4 0:20）
      // canvas.setWidth(200);
      // canvas.setHeight(200);


//       var text = new fabric.Text(text, {
//         fontSize: 100,
//         fill: '#dcdcdc',
//         textAlign: 'center'
//         // stroke: null,
//         // strokeWidth: 0,

//       });

//       text.set({
//         borderColor: 'transparent',
//         cornerColor: 'transparent',
//         cornerStrokeColor: 'transparent',
//         stroke: 'transparent'
//       });




//       // 画像サイズを変更
//       text.scaleToWidth(250);
//       text.scaleToHeight(250);
//       // text.clearRect(0, 0, 200, 200);

//       canvas.add(text);
//     }
// // フォームから文字列を取得する
// var sampleText = document.getElementById('sample-text').textContent;

// // Canvasの背景を設定する
// setBackground(canvas, sampleText);
// // ※


    // テキストを取得して、canvasに描画する
    const text = document.getElementById("sample-text").innerText;
    const textObject = new fabric.Text(text, {
      left: 20,
      top: 20,
      fill: "#dcdcdc",
      fontFamily: "Klee One",
      fontSize: 60,
    });
    canvas.add(textObject);




// ダウンロード
document.getElementById("downloadPng").addEventListener("click", function () {
   const base64 = canvas.toDataURL({
       format: "png",
   });

    document.getElementById("newImg").value = base64;


    $.ajax({
      url: "https://086192e85b094c90b02448a4e1eca7d4.vfs.cloud9.ap-northeast-1.amazonaws.com/letters/<%= @letter.id %>/post_image",  // リクエストを送信するURLを指定
      type: "POST",  // HTTPメソッドを指定（デフォルトはGET）
      data: {  // 送信するデータをハッシュ形式で指定
        image: {body: base64}
      },
      dataType: "json"  // レスポンスデータをjson形式と指定する
    })
    .done(function(data) {
      window.location.href = "https://086192e85b094c90b02448a4e1eca7d4.vfs.cloud9.ap-northeast-1.amazonaws.com/practices";
       // textareaを空にする
    })
    .fail(function() {
      alert("error!");  // 通信に失敗した場合はアラートを表示
    })
    .always(function() {

    });
    //// .done：処理に成功した時（practice/indexぺージに遷移する）。.fail:処理に失敗した時（アラート表示）。.always:done,failの後にいつも行われるもの（特になし）。

});


  // 画像保存機能
      function chgImg()
    {
      var png = cvs.toDataURL();
      byebug
      document.getElementById("newImg").src = png;
    }

    </script>
    <textarea id="newImg" class="hidden_area"></textarea>



<!--  </div>-->
<!--</div>-->
