

<!--<div class="container">-->
<!--  <div class="row">-->

<div>

<!--railsの要素を入れたら描画できなくなったが、divで囲ったら解決した-->
    <h1 class="m-3">文字練習</h1>

    <!--canvasの背景設定時に追加-->
  <div class="border-top border-bottom col-md-4">


      <span id="sample-text" >
        <% sentences = @letter.name.split("\n") %>
        <% sentences.each do |sentence| %>
            <% lines = sentence.scan(/.{1,#{15}}/)%>
            <% lines.each do |line| %>
              <%= line %><br>
            <% end %>
        <% end %>
      </span>

  </div>

</div>

    <div>
        <input type="radio" id="draw" name="mode">
        <label for="draw">ペン</label>
        <!--<input type="radio" id="erase" name="mode">-->
        <!--<label for="draw">消しゴム</label>-->
        <!--<button onclick="canvas.clear().renderAll()", class: "btn btn-sm">全て削除</button>-->

        　<!--「data: {"turbolinks" => false} 」を入れることで背景は消えないようになった-->

    </div>

    <div>
        <%= link_to "一括削除" ,new_sample_practice_path(@letter.id), data: {"turbolinks" => false}, class: "btn" %>
        <% if current_user.email == 'guest@example.com' %>
          <p>[会員登録すると練習の記録ができます。]</p>
        <% else %>
          <input type="button" id="downloadPng" value="保存" class="btn btn-sm" >
        <% end %>
    </div>
    <br>

    <style>
      html, body {
        /*cursor: url(<%= asset_path 'cursor.png' %>), auto;*/
      }
    </style>

    <!-- お絵描きエリアの設定 -->
    <canvas id="canvas" height="500" width="1000" style="border-style: solid; border-color: black;"> </canvas>

    <!-- Fabric.jsの読み込み -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/fabric.js/5.3.1/fabric.min.js"></script>

    <!--ペン機能-->
    <script>
    document.addEventListener('DOMContentLoaded', function(){

    const canvas = new fabric.Canvas("canvas");

    document.getElementById("draw").addEventListener("click", function () {
        canvas.freeDrawingBrush = new fabric.PencilBrush(canvas);
        canvas.freeDrawingCursor = 'url(<%= asset_path 'cursor.png' %>) 5 5 , auto';
        canvas.freeDrawingBrush.width=4;
        canvas.freeDrawingBrush.color="black";
        canvas.isDrawingMode = true;

    });

    // 消しゴム機能
        // canvas.backgroundColor="white";

    // document.getElementById("erase").addEventListener("click", function () {
    //   canvas.freeDrawingBrush = new fabric.PencilBrush(canvas);
    //   canvas.freeDrawingBrush.width=10;
    //   canvas.freeDrawingBrush.color="white";
    //   canvas.isDrawingMode = true;
    // });

    // canvas背景に枠線画像追加（ここから）
        // 画像を読み込むためのImageオブジェクトを作成
    const backgroundImage = new Image();
        // Fabric.jsのloadFromJSONメソッドを呼び出して、キャンバス上に背景画像を設定
    backgroundImage.onload = function() {
    canvas.setBackgroundImage(backgroundImage.src, canvas.renderAll.bind(canvas), {
      //( scaleX と scaleY に元画像のサイズとキャンバスのサイズの比率をかけることで、適切なサイズに変更できる。)
      // (left と top の値を変更することで、画像をずらすことができる。)
      top: 0,
      left: 0,
      scaleX: canvas.width / backgroundImage.width * 1.0,
      scaleY: canvas.height / backgroundImage.height * 1.0

      });
    };
        // 画像を読み込み
    backgroundImage.src = "<%= asset_path('sampleflame.jpg')%>";//"https://drive.google.com/uc?export=view&id=1WWSMI2uAnp8jZgGb4J-ZDDTabsUYHZNI";
    // canvas背景に枠線画像追加（ここまで）




    // テキストを取得して、canvasに描画する
    const text = document.getElementById("sample-text").innerText;
    // 時間伸ばしてフォント読み込む作戦(以下２行)失敗。リロードで対策することにした。
    // var startMsec = new Date();
    // while (new Date() - startMsec < text.length * 100);
    const textObject = new fabric.Text(text, {
      left: 50,
      top: 20,
      fill: "#dcdcdc",
      fontFamily: "Klee One",
      fontSize: 60,
    });
    canvas.add(textObject);


// // フォントを完全に読み込むために自動でリロード
    window.onpageshow = function(event) {
    	if (event.persisted) {
    		 window.location.reload();
    	}
    };



// ダウンロード
document.getElementById("downloadPng").addEventListener("click", function () {
   const base64 = canvas.toDataURL({
       format: "png",
   });

    document.getElementById("newImg").value = base64;


    $.ajax({
      // リクエストを送信するURLを指定(開発)
      // url: "https://086192e85b094c90b02448a4e1eca7d4.vfs.cloud9.ap-northeast-1.amazonaws.com/letters/<　%= @letter.id %>/post_image",
      // リクエストを送信するURLを指定(本番)
      url: "http://43.207.226.239/letters/<%= @letter.id %>/post_image",
      type: "POST",  // HTTPメソッドを指定（デフォルトはGET）
      data: {  // 送信するデータをハッシュ形式で指定
        image: {body: base64}
      },
      dataType: "json"  // レスポンスデータをjson形式と指定する
    })
    .done(function(data) {
      // URLを指定(開発)
      // window.location.href = "https://086192e85b094c90b02448a4e1eca7d4.vfs.cloud9.ap-northeast-1.amazonaws.com/practices";
      // URLを指定(本番)
      window.location.href = "http://43.207.226.239/practices";
       // textareaを空にする
    })
    .fail(function(jqXHR, textStatus, errorThrown) {
      // 通信失敗時の処理
                    alert('ファイルの取得に失敗しました。');
                    console.log("ajax通信に失敗しました");
                    console.log("jqXHR          : " + jqXHR.status); // HTTPステータスが取得
                    console.log("textStatus     : " + textStatus);    // タイムアウト、パースエラー
                    console.log("errorThrown    : " + errorThrown.message); // 例外情報
                    console.log("URL            : " + url);
    })
    .always(function() {

    });
    //// .done：処理に成功した時（practice/indexぺージに遷移する）。.fail:処理に失敗した時（アラート表示）。.always:done,failの後にいつも行われるもの（特になし）。

});


  // 画像保存機能
      function chgImg()
    {
      var png = cvs.toDataURL();
      byebug
      document.getElementById("newImg").src = png;
    }
});
</script>
    <textarea id="newImg" class="hidden_area"></textarea>



<!--  </div>-->
<!--</div>-->
